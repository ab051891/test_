git commands

mkdir test_repo //creating the folder you want to make the repo
cd test_repo //change to the folder you want to make the repo 
git init //initialize the git repo
git commit
git status
git add file.name 
git commit -m "added readme.md"
git status //this gets the staus on the current branch

git add . //this puts the changes to the staging area
git commit -m "made changes" //

git checkout -b new //this creates a new branch call "new"
git checkout master

git merge master //merge existing branch into master branch

The git branch command is used to list all existing branches in a repository. An asterisk will appear next to the currently active branch.
$ git branch
* master

To create a new branch, we can use the git branch new-branch command. This will create a new branch mirroring the commits on the currently active branch:
$ git branch new-branch
$ git branch
* master
new-branch

At this point we have created a new branch, but are still located on the source branch. To start working on the new branch we first need to run the command git checkout new-branch. This will change the active branch to the new branch:
$ git checkout new-branch
Switched to branch ‘new-branch'
$ git branch
master
* new-branch

At this point, commits can be made on the new branch to implement the new feature. Once the feature is complete, the branch can be merged back into the main code branch.

First we run git checkout master to change the active branch back to the master branch. Then we run the command git merge new-branch to merge the new feature into the master branch.
If you're merging a new feature into the main branch, you first want to switch to the main branch and then merge into it:

# ...develop some code...

$ git add –A
$ git commit –m "Some commit message"
$ git checkout master
Switched to branch 'master'
$ git merge new-branch
If all goes well then our job is done. The new feature commits now appear in the main branch. However, it is possible that Git won't be able to complete the merge due to a conflict change in the source branch. This is called a merge conflict.

To summarize, here are the commands to create a new branch, make some commits, and merge it back into master:
$ git checkout master
$ git branch new-branch
$ git checkout new-branch

# ...develop some code...

$ git add –A
$ git commit –m "Some commit message"
$ git checkout master
$ git merge new-branch

…or create a new repository on the command line
echo "# test_" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/ab051891/test_.git
git push -u origin main


…or push an existing repository from the command line
git remote add origin https://github.com/ab051891/test_.git
git branch -M main
git push -u origin main


…or import code from another repository
You can initialize this repository with code from a Subversion, Mercurial, or TFS project.

Delting a Branch
git branch -D <branchName>

How do I delete a remote branch in Git
$ git push origin --delete <remote-branch-name>